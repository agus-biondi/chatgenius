@startuml Channel Creation Flow

' Styling
skinparam sequence {
    ArrowColor #2E3440
    LifeLineBackgroundColor #ECEFF4
    ParticipantBackgroundColor #88C0D0
    ParticipantBorderColor #5E81AC
    BoxBackgroundColor #D8DEE9
    BoxBorderColor #4C566A
}

box "Frontend" #E5E9F0
participant "Sidebar\nComponent" as Sidebar
participant "MainLayout\nComponent" as MainLayout
participant "WebSocket\nService" as WSService
end box

box "Backend" #D8DEE9
participant "Channel\nController" as Controller
participant "Channel\nService" as Service
participant "Channel\nRepository" as Repo
participant "Channel\nWebSocketService" as WSBackend
end box

' Flow
Sidebar -> Controller: POST /api/channels\n{name: "new-channel"}
activate Controller

Controller --> Sidebar: 202 Accepted
deactivate Controller

Controller -> Service: createChannel()
activate Service

Service -> Repo: save channel
activate Repo
Repo --> Service: saved channel
deactivate Repo

Service -> WSBackend: broadcastChannelCreated(channelDto)
activate WSBackend

note right of Service
  Channel DTO includes:
  - id
  - name
  - members
  - createdBy
  - timestamps
end note

WSBackend -> WSService: /topic/channels\n{type: "CHANNEL_CREATE", channel: channelDto}
deactivate WSBackend

WSService -> MainLayout: onChannelEvent(event)
activate MainLayout

note right of MainLayout
  1. Validate event data
  2. Log event details
  3. Add new channel to local state
end note

MainLayout -> MainLayout: setChannels([...channels, event.channel])
deactivate MainLayout

@enduml 