@startuml
actor Client
participant "WebSocket Endpoint (/ws)" as WS
participant "ClerkHandshakeInterceptor" as HandshakeInterceptor
participant "ClerkTokenValidator" as TokenValidator
participant "ClerkChannelInterceptor" as ChannelInterceptor
participant "WebSocketController" as Controller
participant "MessageService" as MessageService
participant "MessageRepository" as MessageRepo
participant "UserRepository" as UserRepo
participant "ChannelRepository" as ChannelRepo
participant "SimpMessagingTemplate" as MessagingTemplate

== Establishing WebSocket Connection ==
Client -> WS: Connect to /ws with\nAuthorization: Bearer {token}
WS -> HandshakeInterceptor: beforeHandshake(request)
HandshakeInterceptor -> TokenValidator: validate(token)
TokenValidator --> HandshakeInterceptor: userId / success
HandshakeInterceptor --> WS: allow handshake,\nstore userId in session
WS --> Client: Handshake success (101 Switching Protocols)

== STOMP Connection ==
Client -> WS: STOMP CONNECT with\nAuthorization header
WS -> ChannelInterceptor: preSend(CONNECT frame)
ChannelInterceptor -> UserRepo: findById(userId)
UserRepo --> ChannelInterceptor: User entity
ChannelInterceptor -> ChannelInterceptor: create Authentication
ChannelInterceptor --> WS: set Authentication in SecurityContext
WS --> Client: STOMP CONNECTED

== Subscribing to a Channel ==
Client -> WS: STOMP SUBSCRIBE to\n/topic/channels/{channelId}
WS -> ChannelInterceptor: preSend(SUBSCRIBE frame)
ChannelInterceptor -> ChannelRepo: verify channel access
ChannelRepo --> ChannelInterceptor: channel details / access granted
ChannelInterceptor --> WS: allow subscription
WS --> Client: SUBSCRIBE ACK

== Sending a Message ==
Client -> WS: STOMP SEND to\n/app/channels/{channelId}/messages\nPayload: {messageDto}
WS -> ChannelInterceptor: preSend(SEND frame)
ChannelInterceptor -> UserRepo: verify user permissions
UserRepo --> ChannelInterceptor: permissions granted
ChannelInterceptor --> WS: allow send
WS -> Controller: handleMessage(channelId, messageDto, Principal)
Controller -> MessageService: processMessage(messageDto, channelId, userId)
MessageService -> UserRepo: findById(userId)
UserRepo --> MessageService: User entity
MessageService -> ChannelRepo: findById(channelId)
ChannelRepo --> MessageService: Channel entity
MessageService -> MessageRepo: save(message)
MessageRepo --> MessageService: savedMessage
MessageService -> MessagingTemplate: convertAndSend(/topic/channels/{channelId}, savedMessageDto)
MessagingTemplate --> MessageService: success
MessageService --> Controller: savedMessageDto
Controller --> WS: Broadcast savedMessageDto to /topic/channels/{channelId}
WS --> Client: MESSAGE to /topic/channels/{channelId} {savedMessageDto}
WS --> "Other Subscribers": MESSAGE to /topic/channels/{channelId} {savedMessageDto}

@enduml
